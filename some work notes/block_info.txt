Reference:
https://github.com/huangsuoyuan/btc_parser
比特币交易网络的去匿名化技术研究_邢尧
//////////////////////////////////////////////////////////////////
区块链是一个个区块按照时间戳顺序形成的数据链
目前的规则中，只要新块的时间戳大于之前11个block的平均时间时间戳、且不超过当前网络时间2个小时，都认为有效。
blockchain提供的不是NTP服务，交易的先后次序是由区块的高度来决定的。
这个时间戳的作用只是使得攻击者更难于操控区块链，并不需要太精确。
同时，由于nonce字段只有32bits，能生成的随机空间太小，很可能出现无解（没有符合难度要求的解）的情况，
此时可以通过微调时间戳来辅助挖矿hash值的计算，提高出块的可能性。


每个区块的大小是2M以下，区块数据存储在区块文件中（形如：blkxxxx0.dat），
区块与区块之间利用“魔数”或“神奇数”分隔（0xF9BEB4D9），
一个区块存储文件可以存储多个区块数据，该文件也有大小限制，达到上限（128M左右），
就会重新建立一个文件存储区块数据，文件名加1（形如：blkxxxx1.dat）。
定位区块数据采用的标识是文件名和偏移量，这就是所谓的区块

//////////////////////////////////////////////////////////////////
区块结构
//////////////////////////////////////////////////////////////////
区块 ---
神奇数          4 byte    # magic_number is fixed   0xD9B4BEF9 = 3652501241
区块大小标示    4 byte
区块头          80 byte
区块体          由交易信息决定


区块头 ---
版本号                    4 byte        # 目前的块版本号有1和2，在227836及之后的块的版本号都是2，在之前的块有的是2有的是1。
前一区块头hash256         32 byte
交易内容hash256           32 byte
时间戳                    4
目标值                    4
随机数                    4


区块体 ---
交易数量   可变
交易       由数目定



交易 ---
版本号              4 byte
tx_in_count         可变
tx_in               可变
tx_out_count        可变
tx_out              可变
lock_time           4 byte


交易输入 ---
previous_output_hash       		32 bytes
previous_output_index                   4 bytes
script_bytes                            可变
signature_script                        可变
sequence 序列号                         4 bytes          # sequence_num is fixed // 0xFFFFFFFF = 4294967295


交易输出 ---
value 花费数目（聪）                                   8 bytes
pk_script_size                                         1+
pk_script 花费这笔输出要满足的条件                     可变 



/////////////////////////////////////////////////////////////////
script
/////////////////////////////////////////////////////////////////
锁定脚本 scriptPubKey --- 往往含有一个公钥
解锁脚本 scriptSig --- 常常包含一个数字签名  并非所有解锁脚本都包含数字签名

Script -- 由操作符op和数据组合而成
	  脚本运行时基于栈运行的 操作符就是操作栈中元素的方式

OP_DUP  复制栈顶元素
数据类的序列化 进入脚本都会被OP_PUSHDATA1[76]，OP_PUSHDATA2[77]，OP_PUSHDATA4[78] 操作符所标明   指明这是一个数据



P2PKH 方式交易（支付到公钥地址模式） ---
<Sig> <PubKey> OP_DUP OP_HASH160 <PubkeyHash> OP_EQUALVERIFY OP_CHECKSIG

P2PKH input script ---
<Sig> <PubKey>

P2PKH output script ---
OP_DUP OP_HASH160 <PubkeyHash> OP_EQUALVERIFY OP_CHECKSIG
























